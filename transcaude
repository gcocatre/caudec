#!/bin/bash

# Copyright © 2012 - 2025 Guillaume Cocatre-Zilgien <guillaume@cocatre.net>
# https://github.com/gcocatre/caudec
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Global variables =============================================================

me="transcaude"
VERSION='2.3.0'

# EX_USAGE: The command was used incorrectly, e.g., with the wrong number of arguments, a bad flag, a bad syntax in a parameter, or whatever.
# EX_DATAERR: The input data was incorrect in some way. This should only be used for user's data & not system files.
# EX_NOINPUT: An input file (not a system file) did not exist or was not readable. This could also include errors like "No message" to a mailer (if it cared to catch it).
# EX_NOUSER: The user specified did not exist. This might be used for mail addresses or remote logins.
# EX_NOHOST: The host specified did not exist. This is used in mail addresses or network requests.
# EX_UNAVAILABLE: A service is unavailable. This can occur if a support program or file does not exist. This can also be used as a catchall message when something you wanted to do doesn't work, but you don't know why.
# EX_SOFTWARE: An internal software error has been detected. This should be limited to non-operating system related errors as possible.
# EX_OSERR: An operating system error has been detected. This is intended to be used for such things as "cannot fork", "cannot create pipe", or the like. It includes things like getuid returning a user that does not exist in the passwd file.
# EX_OSFILE: Some system file (e.g., /etc/passwd, /etc/utmp, etc.) does not exist, cannot be opened, or has some sort of error (e.g., syntax error).
# EX_CANTCREAT: A (user specified) output file cannot be created.
# EX_IOERR: An error occurred while doing I/O on some file.
# EX_TEMPFAIL: temporary failure, indicating something that is not really an error. In sendmail, this means that a mailer (e.g.) could not create a connection, and the request should be reattempted later.
# EX_PROTOCOL: the remote system returned something that was "not possible" during a protocol exchange.
# EX_NOPERM: You did not have sufficient permission to perform the operation. This is not intended for file system problems, which should use NOINPUT or CANTCREAT, but rather for higher level permissions.

EX_OK=0             # successful termination
EX_KO=1             # unsuccessful termination
EX_USAGE=64         # command line usage error
EX_DATAERR=65       # data format error
EX_NOINPUT=66       # cannot open input
EX_NOUSER=67        # addressee unknown
EX_NOHOST=68        # host name unknown
EX_UNAVAILABLE=69   # service unavailable
EX_SOFTWARE=70      # internal software error
EX_OSERR=71         # system error (e.g., can't fork)
EX_OSFILE=72        # critical OS file missing
EX_CANTCREAT=73     # can't create (user) output file
EX_IOERR=74         # input/output error
EX_TEMPFAIL=75      # temp failure; user is invited to retry
EX_PROTOCOL=76      # remote error in protocol
EX_NOPERM=77        # permission denied
EX_CONFIG=78        # configuration error
EX_INTERRUPT=143    # user interruption (Ctrl+C)

EL="\\033[2K\\033[0G"
OK="\\033[1;32m" KO="\\033[1;31m" WG="\\033[1;33m"
DG="\\033[0;32m" # dark green
DR="\\033[0;31m" # dark red
BR="\\033[0;33m" # brown
DB="\\033[0;34m" # dark blue
BB="\\033[1;34m" # bright blue
NM="\\033[0m" BD="\\033[1;37m" GR="\\033[1;30m" CY="\\033[0;36m" BCY="\\033[1;36m"

printUsage ()
{
  echo "$me ${VERSION}: transcode an album, compute ReplayGain and touch files
Copyright © 2012 - 2025 Guillaume Cocatre-Zilgien
https://github.com/gcocatre/caudec

Usage: $me [ GLOBAL PARAMS ] [ CAUDEC PARAMS ] [ DIR | FILES ]
Operate on all audio files of a single album at once, in parallel.
A single directory (with -i), or a list of files, may be passed as arguments.
Try 'caudec -h' to learn about CAUDEC PARAMS.

-------------------------------------------------------------------------------

Global parameters:

  -h        display this help and exit
  -V        output version information and exit

  -s        be silent, only print errors

-------------------------------------------------------------------------------

For more help, see the online documentation:
https://github.com/gcocatre/caudec"
}


if [ $# -eq 0 ]; then
  printUsage
  exit $EX_USAGE
fi
if [ "$1" = "-h" ]; then
  printUsage
  exit $EX_OK
fi
if [ "$1" = "-V" ]; then
  echo "$me $VERSION"
  exit $EX_OK
fi

verbose=true
if [ "$1" = "-s" ]; then
  verbose=false
  shift
fi

for arg in "$@"; do
  if [ "$arg" = "-z" -o "$arg" = "-Z" ]; then
    echo "$me: error: don't specify either -z or -Z." 1>&2; exit $EX_USAGE
  elif [ "$arg" = "-h" -o "$arg" = "-V" -o "$arg" = "-s" ]; then
    echo "$me: error: please specify $arg only once, as the first parameter." 1>&2; exit $EX_USAGE
  fi
done

if [ -n "$TMPDIR" ]; then mktempDir="$TMPDIR"; else mktempDir='/tmp'; fi
TDIR="$( mktemp -d "${mktempDir}/${me}.XXXXXXXX" )"
if [ ! -e "$TDIR" ]; then
  echo "$me: error: cannot create temporary directory" 1>&2; ec=$EX_CANTCREAT
  exit $ec
elif [ ! -d "$TDIR" ]; then
  echo "$me: error: cannot create temporary directory" 1>&2; ec=$EX_CANTCREAT
  rm -rf "$TDIR"
  exit $ec
elif [ ! -w "$TDIR" ]; then
  echo "$me: error: temporary directory is not writable" 1>&2; ec=$EX_NOPERM
  rm -rf "$TDIR"
  exit $ec
fi

encodingLog="${TDIR}/encoding_log"
replayGainLog="${TDIR}/replay_gain_log"
touchLog="${TDIR}/touch_log"

outputWarningOrError ()
{
  local fileName="${file##*/}"

  # status status_info status_data file message process_id
	case "$status" in
		error)
			if [ "$status_info" = 'decoding' ]; then
				str="$( printf "${GR} * ${KO}DC ${CY}%s${NM}\n" "$fileName" )"
			elif [ "$status_info" = 'processing' ]; then
				str="$( printf "${GR} * ${KO}PR ${CY}%s${NM}\n" "$fileName" )"
			elif [ -n "$file" ]; then
				if [ -n "$message" ]; then
					str="$( printf "${GR} * ${KO}ER ${CY}%s${NM}: %s\n" "$fileName" "$message" )"
				else
					str="$( printf "${GR} * ${KO}ER ${CY}%s${NM}\n" "$fileName" )"
				fi
			elif [ -n "$message" ]; then
				str="$( printf "${GR} * ${KO}ER${NM} %s\n" "$message" )"
			fi
      echo -e "$str" 1>&2
			;;

		warning)
			if [ -n "$file" ]; then
				str="$( printf "${GR} * ${WG}WG ${CY}%s${NM}: %s\n" "$fileName" "$message" )"
			else
				str="$( printf "${GR} * ${WG}WG${NM} %s\n" "$message" )"
			fi
      echo -e "$str" 1>&2
			;;
	esac
}

computeReplayGain ()
{
  local status status_info status_data file message process_id

  case "$lastCodec" in
    FLAC|WavPack*|lossyFLAC|lossyWV|OggVorbis|MP3|Opus)
      if [ $verbose = true ]; then
        echo
        echo "Computing ReplayGain for $lastCodec in $lastDir:"
      fi
      if [ "$lastCodec" = "MP3" ]; then
        if [ $verbose = true ]; then
          caudec -Z -G album "${files[@]}" 2>"${replayGainLog}_${lastCodec}" || ec=$EX_KO
        else
          caudec -Z -G album "${files[@]}" 1>/dev/null 2>"${replayGainLog}_${lastCodec}" || ec=$EX_KO
        fi
      else
        if [ $verbose = true ]; then
          caudec -Z -g "${files[@]}" 2>"${replayGainLog}_${lastCodec}" || ec=$EX_KO
        else
          caudec -Z -g "${files[@]}" 1>/dev/null 2>"${replayGainLog}_${lastCodec}" || ec=$EX_KO
        fi
      fi

      if [ $verbose = false ]; then
        while read status status_info status_data file message process_id; do
          if [ "$status" != "success" ]; then
            outputWarningOrError
          fi
        done < <( grep -F "_gain|" "${replayGainLog}_${lastCodec}" 2>/dev/null )
      fi
      ;;

    *)
      if [ $verbose = true ]; then
        echo
        status="warning"
        message="Not computing ReplayGain for unsupported codec $lastCodec in $lastDir."
        outputWarningOrError
      fi
      ;;
  esac
}

touchFiles ()
{
  local status status_info status_data file message process_id

  case "$lastCodec" in
    FLAC|ALAC|WavPack*|lossyFLAC|lossyWV|OggVorbis|AAC|MonkeysAudio|MP3|Opus)
      if [ $verbose = true ]; then
        echo
        echo "Touching directory for $lastCodec in $lastDir:"
        caudec -Z -T "$lastDir" 2> "${touchLog}_${lastCodec}" || ec=$EX_KO
      else
        caudec -Z -T "$lastDir" 1>/dev/null 2> "${touchLog}_${lastCodec}" || ec=$EX_KO
      fi

      if [ $verbose = false ]; then
        while read status status_info status_data file message process_id; do
          if [ "$status" != "success" ]; then
            outputWarningOrError
          fi
        done < <( grep -F "|touch_file" "${touchLog}_${lastCodec}" 2>/dev/null )
      fi
      ;;

    *)
      if [ $verbose = true ]; then
        echo
        status="warning"
        message="Not touching directory for unsupported codec $lastCodec in $lastDir."
        outputWarningOrError
      fi
      ;;
  esac
}

if [ $verbose = true ]; then
  echo "Transcoding files:"
  caudec -Z "$@" 2>"$encodingLog"; ec=$?
else
  caudec -Z "$@" 1>/dev/null 2>"$encodingLog"; ec=$?
fi

if [ $ec -eq $EX_OK ]; then
  sort "$encodingLog" > "${encodingLog}2" && mv "${encodingLog}2" "$encodingLog"
  echo "zzzzzzzz|encoding|zzzzzzzz|zzzzzzzz|zzzzzzzz|12345678" 1>> "$encodingLog"
  OIFS="$IFS"
  IFS="|"
  declare -a files=()
  index=0
  lastCodec=""
  lastDir=""
  while read status status_info status_data file message process_id; do
    dir="$( dirname "$file" )"
    codec="$status_data"
    if [ -n "$lastCodec" -a -n "$lastDir" ]; then
      if [ "$codec" != "$lastCodec" -o "$dir" != "$lastDir" ]; then
        computeReplayGain
        touchFiles
        unset files
        declare -a files=()
        index=0
      fi
    fi
    if [ "$status" = "success" ]; then
      files[$index]="$file"
      index=$(( index + 1 ))
    elif [ $verbose = false ]; then
      outputWarningOrError
    fi
    lastCodec="$codec"
    lastDir="$dir"
  done < <( grep -F "|encoding|" "$encodingLog" 2>/dev/null )
  IFS="$OIFS"
fi

if [ $verbose = true ]; then
  echo
fi
rm -rf "$TDIR"
exit $ec